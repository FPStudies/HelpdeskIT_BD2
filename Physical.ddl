-- Generated by Oracle SQL Developer Data Modeler 19.2.0.182.1216
--   at:        2020-05-22 14:49:20 CEST
--   site:      Oracle Database 11g
--   type:      Oracle Database 11g



CREATE SEQUENCE archived_tickets_id_seq;

CREATE SEQUENCE attachment_id_seq;

CREATE SEQUENCE client_id_seq;

CREATE SEQUENCE contract_id_seq;

CREATE SEQUENCE employe_id_seq;

CREATE SEQUENCE message_id_seq;

CREATE SEQUENCE ticket_number_seq ORDER;

CREATE TABLE sla (
    name            VARCHAR2(40 CHAR) NOT NULL,
    response_time   INTEGER NOT NULL
)
LOGGING;

ALTER TABLE sla ADD CONSTRAINT sla_pk PRIMARY KEY ( name );

CREATE TABLE contracts (
    id          INTEGER NOT NULL,
    end_date    DATE NOT NULL,
    sla         VARCHAR2(40 CHAR) NOT NULL,
    client_id   INTEGER NOT NULL,
    software    VARCHAR2(100 CHAR) NOT NULL
)
LOGGING;

CREATE INDEX contracts_end_date__idx ON
    contracts (
        end_date
    ASC )
        LOGGING;

CREATE BITMAP INDEX contracts_sla__idx ON
    contracts (
        sla
    ASC )
        LOGGING;

CREATE INDEX contracts_client_id__idx ON
    contracts (
        client_id
    ASC )
        LOGGING;

CREATE BITMAP INDEX contracts_software__idx ON
    contracts (
        software
    ASC )
        LOGGING;

ALTER TABLE contracts ADD CONSTRAINT contracts_pk PRIMARY KEY ( id );

CREATE OR REPLACE FUNCTION find_response_time_f (
    p_client_id       IN   NUMBER DEFAULT NULL,
    p_software_name   IN   STRING DEFAULT NULL
) RETURN NUMBER IS
    v_response_time NUMBER := NULL;
BEGIN
    BEGIN
        IF p_client_id IS NOT NULL AND p_software_name IS NOT NULL THEN
            SELECT
                sla.response_time
            INTO v_response_time
            FROM
                sla
                JOIN contracts ON sla.name = contracts.sla
            WHERE
                contracts.client_id = p_client_id
                AND contracts.software = p_software_name
                AND contracts.end_date > sysdate;

        END IF;
    EXCEPTION
        WHEN no_data_found THEN
            v_response_time := NULL;
    END;

    RETURN v_response_time;
END find_response_time_f;
/

CREATE TABLE archived_ticket_status (
    status VARCHAR2(40 CHAR) NOT NULL
)
LOGGING;

ALTER TABLE archived_ticket_status ADD CONSTRAINT archived_ticket_status_pk PRIMARY KEY ( status );

CREATE TABLE active_ticket_status (
    status VARCHAR2(40 CHAR) NOT NULL
)
LOGGING;

ALTER TABLE active_ticket_status ADD CONSTRAINT active_ticket_status_pk PRIMARY KEY ( status );

CREATE TABLE active_tickets (
    ticket_number         INTEGER NOT NULL,
    description           VARCHAR2(4000) NOT NULL,
    attempted_solutions   VARCHAR2(4000),
    submission_date       DATE NOT NULL,
    modification_date     DATE NOT NULL,
    due_date              DATE,
    ticket_status         VARCHAR2(40 CHAR) NOT NULL,
    priority              VARCHAR2(40 CHAR) NOT NULL,
    software              VARCHAR2(100 CHAR) NOT NULL,
    issue_type            VARCHAR2(40 CHAR) NOT NULL,
    environment           VARCHAR2(40 CHAR) NOT NULL,
    employee_id           INTEGER NOT NULL,
    client_id             INTEGER NOT NULL
)
LOGGING;

CREATE UNIQUE INDEX active_number__idx ON
    active_tickets (
        ticket_number
    ASC )
        LOGGING;

CREATE INDEX active_sub_date__idx ON
    active_tickets (
        submission_date
    ASC )
        LOGGING;

CREATE INDEX active_mod_date__idx ON
    active_tickets (
        modification_date
    ASC )
        LOGGING;

CREATE INDEX active_due_date__idx ON
    active_tickets (
        due_date
    ASC )
        LOGGING;

CREATE BITMAP INDEX active_status__idx ON
    active_tickets (
        ticket_status
    ASC )
        LOGGING;

CREATE BITMAP INDEX active_priority__idx ON
    active_tickets (
        priority
    ASC )
        LOGGING;

CREATE BITMAP INDEX active_software__idx ON
    active_tickets (
        software
    ASC )
        LOGGING;

CREATE BITMAP INDEX active_issue_type__idx ON
    active_tickets (
        issue_type
    ASC )
        LOGGING;

CREATE BITMAP INDEX active_environment__idx ON
    active_tickets (
        environment
    ASC )
        LOGGING;

CREATE INDEX active_employee__idx ON
    active_tickets (
        employee_id
    ASC )
        LOGGING;

CREATE INDEX active_client__idx ON
    active_tickets (
        client_id
    ASC )
        LOGGING;

ALTER TABLE active_tickets
    ADD CONSTRAINT active_resonable_date_ck CHECK ( submission_date >= TO_DATE('2020-01-01', 'yyyy-mm-dd')
                                                    AND modification_date >= TO_DATE('2020-01-01', 'yyyy-mm-dd') );

ALTER TABLE active_tickets ADD CONSTRAINT active_tickets_pk PRIMARY KEY ( ticket_number );

CREATE OR REPLACE PROCEDURE Close_Ticket_p (p_Ticket_Number IN NUMBER, p_Closing_Status IN VARCHAR2) AS 
v_Match_CK_Number NUMBER;
BEGIN
    SELECT COUNT(*) INTO v_Match_CK_Number FROM ((SELECT STATUS FROM ARCHIVED_TICKET_STATUS) MINUS (SELECT STATUS FROM ACTIVE_TICKET_STATUS)) WHERE STATUS = p_Closing_Status;
    
    IF v_Match_CK_Number > 0 THEN
        UPDATE ACTIVE_TICKETS SET TICKET_STATUS = p_Closing_Status WHERE TICKET_NUMBER = p_Ticket_Number;
        DELETE FROM ACTIVE_TICKETS WHERE TICKET_NUMBER = p_Ticket_Number;
    END IF;
END;
/

CREATE OR REPLACE PROCEDURE Insert_Active_Status_p (p_Status IN VARCHAR2) AS 
BEGIN
 INSERT INTO Active_Ticket_Status VALUES (p_Status);
 INSERT INTO Archived_Ticket_Status VALUES (p_Status);
END;
/

CREATE TABLE raw_tickets (
    ticket_number     INTEGER NOT NULL,
    description       VARCHAR2(4000) NOT NULL,
    submission_date   DATE NOT NULL,
    due_date          DATE,
    priority          VARCHAR2(40 CHAR) NOT NULL,
    software          VARCHAR2(100 CHAR) NOT NULL,
    issue_type        VARCHAR2(40 CHAR) NOT NULL,
    environment       VARCHAR2(40 CHAR) NOT NULL,
    client_id         INTEGER NOT NULL
)
LOGGING;

CREATE UNIQUE INDEX raw_number_idx ON
    raw_tickets (
        ticket_number
    ASC )
        LOGGING;

CREATE INDEX raw_sub_date_idx ON
    raw_tickets (
        submission_date
    ASC )
        LOGGING;

CREATE INDEX raw_due_date_idx ON
    raw_tickets (
        due_date
    ASC )
        LOGGING;

CREATE BITMAP INDEX raw_priority_idx ON
    raw_tickets (
        priority
    ASC )
        LOGGING;

CREATE BITMAP INDEX raw_software_idx ON
    raw_tickets (
        software
    ASC )
        LOGGING;

CREATE BITMAP INDEX raw_issue_type_idx ON
    raw_tickets (
        issue_type
    ASC )
        LOGGING;

CREATE BITMAP INDEX raw_environment_idx ON
    raw_tickets (
        environment
    ASC )
        LOGGING;

CREATE INDEX raw_client_id_idx ON
    raw_tickets (
        client_id
    ASC )
        LOGGING;

ALTER TABLE raw_tickets
    ADD CONSTRAINT raw_resonable_date_ck CHECK ( submission_date >= TO_DATE('2020-01-01', 'yyyy-mm-dd') );

ALTER TABLE raw_tickets ADD CONSTRAINT raw_tickets_pk PRIMARY KEY ( ticket_number );

CREATE OR REPLACE PROCEDURE Insert_Raw_Ticket_p 
(p_Description IN VARCHAR2, p_Priority IN VARCHAR2, p_Software IN VARCHAR2, p_Issue_Type IN VARCHAR2, p_Environment IN VARCHAR2, p_Client_ID IN NUMBER) AS 
BEGIN
 INSERT INTO Raw_Tickets(Description, Priority, Software, Issue_Type, Environment, Client_ID) VALUES (p_Description, p_Priority, p_Software, p_Issue_Type, p_Environment, p_Client_ID);
END;
/

CREATE OR REPLACE PROCEDURE Modify_Active_Status_p (p_Old_Status IN VARCHAR2, p_New_Status IN VARCHAR2) AS 
BEGIN
 UPDATE Active_Ticket_Status SET Status = p_New_Status WHERE Status = p_Old_Status;
 INSERT INTO Archived_Ticket_Status VALUES (p_New_Status);
END;
/

CREATE OR REPLACE PROCEDURE Receive_Ticket_p (p_Ticket_Number IN NUMBER, p_Employee_ID IN NUMBER) AS 
v_Raw_Ticket Raw_Tickets%ROWTYPE;
BEGIN
 SELECT * INTO v_Raw_Ticket FROM RAW_TICKETS WHERE TICKET_NUMBER = p_Ticket_Number;
 
 INSERT INTO ACTIVE_TICKETS VALUES (v_Raw_Ticket.Ticket_Number, v_Raw_Ticket.Description, '', v_Raw_Ticket.Submission_Date, 
 SYSDATE, v_Raw_Ticket.Due_Date, 'Received', v_Raw_Ticket.Priority, v_Raw_Ticket.Software, v_Raw_Ticket.Issue_Type,
 v_Raw_Ticket.Environment, p_Employee_ID, v_Raw_Ticket.Client_ID);
 
 DELETE FROM RAW_TICKETS WHERE TICKET_NUMBER = p_Ticket_Number;
END;
/

CREATE TABLE archived_tickets (
    id                    INTEGER NOT NULL,
    ticket_number         INTEGER NOT NULL,
    description           VARCHAR2(4000) NOT NULL,
    attempted_solutions   VARCHAR2(4000),
    submission_date       DATE NOT NULL,
    modification_date     DATE NOT NULL,
    due_date              DATE,
    ticket_status         VARCHAR2(40 CHAR) NOT NULL,
    priority              VARCHAR2(40 CHAR) NOT NULL,
    software              VARCHAR2(100 CHAR) NOT NULL,
    issue_type            VARCHAR2(40 CHAR) NOT NULL,
    environment           VARCHAR2(40 CHAR) NOT NULL,
    employee_id           INTEGER NOT NULL,
    client_id             INTEGER NOT NULL
)
LOGGING;

CREATE INDEX archived_number__idx ON
    archived_tickets (
        ticket_number
    ASC )
        LOGGING;

CREATE INDEX archived_submission_date_idx ON
    archived_tickets (
        submission_date
    ASC )
        LOGGING;

CREATE INDEX archived_mod_date__idx ON
    archived_tickets (
        modification_date
    ASC )
        LOGGING;

CREATE INDEX archived_change_date__idx ON
    archived_tickets (
        modification_date
    ASC,
        ticket_status
    ASC )
        LOGGING;

CREATE BITMAP INDEX archived_status__idx ON
    archived_tickets (
        ticket_status
    ASC )
        LOGGING;

CREATE BITMAP INDEX archived_priority_idx ON
    archived_tickets (
        priority
    ASC )
        LOGGING;

CREATE BITMAP INDEX archived_software_idx ON
    archived_tickets (
        software
    ASC )
        LOGGING;

CREATE BITMAP INDEX archived_issue_type_idx ON
    archived_tickets (
        issue_type
    ASC )
        LOGGING;

CREATE BITMAP INDEX archived_environment_idx ON
    archived_tickets (
        environment
    ASC )
        LOGGING;

CREATE INDEX archived_employee_id_idx ON
    archived_tickets (
        employee_id
    ASC )
        LOGGING;

CREATE INDEX archived_client__idx ON
    archived_tickets (
        client_id
    ASC )
        LOGGING;

ALTER TABLE archived_tickets
    ADD CONSTRAINT archived_resonable_date_ck CHECK ( submission_date >= TO_DATE('2020-01-01', 'yyyy-mm-dd')
                                                      AND modification_date >= TO_DATE('2020-01-01', 'yyyy-mm-dd') );

ALTER TABLE archived_tickets ADD CONSTRAINT archived_tickets_pk PRIMARY KEY ( id );

CREATE TABLE attachments (
    id           INTEGER NOT NULL,
    "File"       ordsys.orddoc NOT NULL,
    message_id   INTEGER NOT NULL
)
LOGGING;

CREATE INDEX attachments_msg_id__idx ON
    attachments (
        message_id
    ASC )
        LOGGING;

ALTER TABLE attachments ADD CONSTRAINT attachments_pk PRIMARY KEY ( id,
                                                                    message_id );

CREATE TABLE clients (
    id           INTEGER NOT NULL,
    first_name   VARCHAR2(20 CHAR) NOT NULL,
    last_name    VARCHAR2(20 CHAR) NOT NULL,
    email        VARCHAR2(40 CHAR) NOT NULL,
    password     VARCHAR2(40 CHAR) NOT NULL,
    boss_id      INTEGER
)
LOGGING;

CREATE INDEX clients_email__idx ON
    clients (
        email
    ASC )
        LOGGING;

CREATE INDEX clients_last_name__idx ON
    clients (
        last_name
    ASC )
        LOGGING;

ALTER TABLE clients ADD CONSTRAINT clients_pk PRIMARY KEY ( id );

CREATE TABLE employees (
    id           INTEGER NOT NULL,
    first_name   VARCHAR2(20 CHAR) NOT NULL,
    last_name    VARCHAR2(20 CHAR) NOT NULL,
    email        VARCHAR2(40 CHAR) NOT NULL,
    password     VARCHAR2(40 CHAR) NOT NULL,
    position     VARCHAR2(40 CHAR) NOT NULL,
    team         VARCHAR2(40 CHAR) NOT NULL
)
LOGGING;

CREATE INDEX employees_email__idx ON
    employees (
        email
    ASC )
        LOGGING;

CREATE BITMAP INDEX employees_position__idx ON
    employees (
        position
    ASC )
        LOGGING;

CREATE BITMAP INDEX employees_team__idx ON
    employees (
        team
    ASC )
        LOGGING;

ALTER TABLE employees ADD CONSTRAINT employees_pk PRIMARY KEY ( id );

CREATE TABLE environment (
    os VARCHAR2(40 CHAR) NOT NULL
)
LOGGING;

ALTER TABLE environment ADD CONSTRAINT environment_pk PRIMARY KEY ( os );

CREATE TABLE issue_type (
    type VARCHAR2(40 CHAR) NOT NULL
)
LOGGING;

ALTER TABLE issue_type ADD CONSTRAINT issue_type_pk PRIMARY KEY ( type );

CREATE TABLE messages (
    id                INTEGER NOT NULL,
    ticket_number     INTEGER NOT NULL,
    sender            VARCHAR2(40 CHAR) NOT NULL,
    receiver          VARCHAR2(40 CHAR) NOT NULL,
    "Date"            DATE,
    topic             VARCHAR2(60 CHAR),
    content           VARCHAR2(4000),
    previous_msg_id   INTEGER
)
LOGGING;

CREATE UNIQUE INDEX messages_prev_msg__idx ON
    messages (
        previous_msg_id
    ASC )
        LOGGING;

CREATE INDEX messages_ticket_num__idx ON
    messages (
        ticket_number
    ASC )
        LOGGING;

CREATE INDEX messages_date__idx ON
    messages (
        "Date"
    ASC )
        LOGGING;

ALTER TABLE messages ADD CONSTRAINT messages_pk PRIMARY KEY ( id );

CREATE TABLE position (
    name VARCHAR2(40 CHAR) NOT NULL
)
LOGGING;

ALTER TABLE position ADD CONSTRAINT position_pk PRIMARY KEY ( name );

CREATE TABLE priority (
    priority VARCHAR2(40 CHAR) NOT NULL
)
LOGGING;

ALTER TABLE priority ADD CONSTRAINT priority_pk PRIMARY KEY ( priority );

CREATE TABLE software (
    name VARCHAR2(100 CHAR) NOT NULL
)
LOGGING;

ALTER TABLE software ADD CONSTRAINT software_pk PRIMARY KEY ( name );

CREATE TABLE team (
    type VARCHAR2(40 CHAR) NOT NULL
)
LOGGING;

ALTER TABLE team ADD CONSTRAINT team_pk PRIMARY KEY ( type );

CREATE TABLE ticket_identyfication (
    ticket_number INTEGER NOT NULL
)
LOGGING;

ALTER TABLE ticket_identyfication ADD CONSTRAINT ticket_identyfication_pk PRIMARY KEY ( ticket_number );

CREATE MATERIALIZED VIEW all_active_count_mv
    REFRESH
        FORCE
        START WITH sysdate
        NEXT sysdate + 1 / 2
        WITH ROWID
AS
    SELECT
        COUNT(*) AS count
    FROM
        active_tickets;

CREATE MATERIALIZED VIEW all_closed_count_mv
    REFRESH
        FORCE
        START WITH sysdate
        NEXT sysdate + 1 / 2
        WITH ROWID
AS
    SELECT
        to_char(modification_date, 'YYYY') AS year,
        to_char(modification_date, 'MM') AS month,
        to_char(modification_date, 'DD') AS day,
        COUNT(*) AS count
    FROM
        archived_tickets
    WHERE
        upper(ticket_status) IN (
            'DROPPED',
            'SOLVED'
        )
    GROUP BY
        ROLLUP(to_char(modification_date, 'YYYY'),
               to_char(modification_date, 'MM'),
               to_char(modification_date, 'DD'));

CREATE MATERIALIZED VIEW all_closed_mv
    REFRESH
        FORCE
        START WITH sysdate
        NEXT sysdate + 1 / 2
        WITH ROWID
AS
    SELECT
        *
    FROM
        archived_tickets
    WHERE
        upper(ticket_status) IN (
            'DROPPED',
            'SOLVED'
        );

CREATE MATERIALIZED VIEW all_dropped_count_mv
    REFRESH
        FORCE
        START WITH sysdate
        NEXT sysdate + 1 / 2
        WITH ROWID
AS
    SELECT
        to_char(modification_date, 'YYYY') AS year,
        to_char(modification_date, 'MM') AS month,
        to_char(modification_date, 'DD') AS day,
        COUNT(*) AS count
    FROM
        archived_tickets
    WHERE
        upper(ticket_status) = 'DROPPED'
    GROUP BY
        ROLLUP(to_char(modification_date, 'YYYY'),
               to_char(modification_date, 'MM'),
               to_char(modification_date, 'DD'));

CREATE MATERIALIZED VIEW all_dropped_mv
    REFRESH
        FORCE
        START WITH sysdate
        NEXT sysdate + 1 / 2
        WITH ROWID
AS
    SELECT
        *
    FROM
        archived_tickets
    WHERE
        upper(ticket_status) = 'DROPPED';

CREATE MATERIALIZED VIEW all_solved_count_mv
    REFRESH
        FORCE
        START WITH sysdate
        NEXT sysdate + 1 / 2
        WITH ROWID
AS
    SELECT
        to_char(modification_date, 'YYYY') AS year,
        to_char(modification_date, 'MM') AS month,
        to_char(modification_date, 'DD') AS day,
        COUNT(*) AS count
    FROM
        archived_tickets
    WHERE
        upper(ticket_status) = 'SOLVED'
    GROUP BY
        ROLLUP(to_char(modification_date, 'YYYY'),
               to_char(modification_date, 'MM'),
               to_char(modification_date, 'DD'));

CREATE MATERIALIZED VIEW all_solved_mv
    REFRESH
        FORCE
        START WITH sysdate
        NEXT sysdate + 1 / 2
        WITH ROWID
AS
    SELECT
        *
    FROM
        archived_tickets
    WHERE
        upper(ticket_status) = 'SOLVED';

CREATE MATERIALIZED VIEW time_diff_mv
    REFRESH
        FORCE
        START WITH sysdate
        NEXT sysdate + 1 / 2
        WITH ROWID
AS
    SELECT
        due_date - modification_date AS closing_time_difference
    FROM
        archived_tickets
    WHERE
        upper(ticket_status) IN (
            'DROPPED',
            'SOLVED'
        );

CREATE MATERIALIZED VIEW LOG ON active_tickets NOLOGGING
    STORAGE ( BUFFER_POOL DEFAULT )
NOCACHE
    NOPARALLEL
WITH
    PRIMARY KEY ( client_id )
PURGE IMMEDIATE SYNCHRONOUS;

CREATE MATERIALIZED VIEW LOG ON archived_tickets NOLOGGING
    STORAGE ( BUFFER_POOL DEFAULT )
NOCACHE
    NOPARALLEL
WITH
    ( client_id )
PURGE IMMEDIATE SYNCHRONOUS;

ALTER TABLE active_tickets
    ADD CONSTRAINT active_clients_fk FOREIGN KEY ( client_id )
        REFERENCES clients ( id )
    DEFERRABLE INITIALLY DEFERRED;

ALTER TABLE active_tickets
    ADD CONSTRAINT active_employees_fk FOREIGN KEY ( employee_id )
        REFERENCES employees ( id )
    DEFERRABLE INITIALLY DEFERRED;

ALTER TABLE active_tickets
    ADD CONSTRAINT active_environment_fk FOREIGN KEY ( environment )
        REFERENCES environment ( os )
    DEFERRABLE INITIALLY DEFERRED;

ALTER TABLE active_tickets
    ADD CONSTRAINT active_issue_type_fk FOREIGN KEY ( issue_type )
        REFERENCES issue_type ( type )
    DEFERRABLE INITIALLY DEFERRED;

ALTER TABLE active_tickets
    ADD CONSTRAINT active_priority_fk FOREIGN KEY ( priority )
        REFERENCES priority ( priority )
    DEFERRABLE INITIALLY DEFERRED;

ALTER TABLE active_tickets
    ADD CONSTRAINT active_software_fk FOREIGN KEY ( software )
        REFERENCES software ( name )
    DEFERRABLE INITIALLY DEFERRED;

ALTER TABLE active_tickets
    ADD CONSTRAINT active_ticket_status_fk FOREIGN KEY ( ticket_status )
        REFERENCES active_ticket_status ( status )
    DEFERRABLE INITIALLY DEFERRED;

ALTER TABLE active_tickets
    ADD CONSTRAINT active_tnumber_fk FOREIGN KEY ( ticket_number )
        REFERENCES ticket_identyfication ( ticket_number )
    DEFERRABLE INITIALLY DEFERRED;

ALTER TABLE archived_tickets
    ADD CONSTRAINT archived_clients_fk FOREIGN KEY ( client_id )
        REFERENCES clients ( id )
    DEFERRABLE INITIALLY DEFERRED;

ALTER TABLE archived_tickets
    ADD CONSTRAINT archived_employees_fk FOREIGN KEY ( employee_id )
        REFERENCES employees ( id )
    DEFERRABLE INITIALLY DEFERRED;

ALTER TABLE archived_tickets
    ADD CONSTRAINT archived_environment_fk FOREIGN KEY ( environment )
        REFERENCES environment ( os )
    DEFERRABLE INITIALLY DEFERRED;

ALTER TABLE archived_tickets
    ADD CONSTRAINT archived_issue_type_fk FOREIGN KEY ( issue_type )
        REFERENCES issue_type ( type )
    DEFERRABLE INITIALLY DEFERRED;

ALTER TABLE archived_tickets
    ADD CONSTRAINT archived_priority_fk FOREIGN KEY ( priority )
        REFERENCES priority ( priority )
    DEFERRABLE INITIALLY DEFERRED;

ALTER TABLE archived_tickets
    ADD CONSTRAINT archived_software_fk FOREIGN KEY ( software )
        REFERENCES software ( name )
    DEFERRABLE INITIALLY DEFERRED;

ALTER TABLE archived_tickets
    ADD CONSTRAINT archived_ticket_status_fk FOREIGN KEY ( ticket_status )
        REFERENCES archived_ticket_status ( status )
    DEFERRABLE INITIALLY DEFERRED;

ALTER TABLE archived_tickets
    ADD CONSTRAINT archived_tnumber_fk FOREIGN KEY ( ticket_number )
        REFERENCES ticket_identyfication ( ticket_number )
    DEFERRABLE INITIALLY DEFERRED;

ALTER TABLE attachments
    ADD CONSTRAINT attachments_message_fk FOREIGN KEY ( message_id )
        REFERENCES messages ( id )
    DEFERRABLE INITIALLY DEFERRED;

ALTER TABLE clients
    ADD CONSTRAINT clients_clients_fk FOREIGN KEY ( boss_id )
        REFERENCES clients ( id )
    DEFERRABLE INITIALLY DEFERRED;

ALTER TABLE contracts
    ADD CONSTRAINT contracts_clients_fk FOREIGN KEY ( client_id )
        REFERENCES clients ( id )
    DEFERRABLE INITIALLY DEFERRED;

ALTER TABLE contracts
    ADD CONSTRAINT contracts_sla_fk FOREIGN KEY ( sla )
        REFERENCES sla ( name )
    DEFERRABLE INITIALLY DEFERRED;

ALTER TABLE contracts
    ADD CONSTRAINT contracts_software_fk FOREIGN KEY ( software )
        REFERENCES software ( name )
    DEFERRABLE INITIALLY DEFERRED;

ALTER TABLE employees
    ADD CONSTRAINT employees_position_fk FOREIGN KEY ( position )
        REFERENCES position ( name )
    DEFERRABLE INITIALLY DEFERRED;

ALTER TABLE employees
    ADD CONSTRAINT employees_team_fk FOREIGN KEY ( team )
        REFERENCES team ( type )
    DEFERRABLE INITIALLY DEFERRED;

ALTER TABLE messages
    ADD CONSTRAINT messages_messages_fk FOREIGN KEY ( previous_msg_id )
        REFERENCES messages ( id )
    DEFERRABLE INITIALLY DEFERRED;

ALTER TABLE messages
    ADD CONSTRAINT messages_tnumber_fk FOREIGN KEY ( ticket_number )
        REFERENCES ticket_identyfication ( ticket_number )
    DEFERRABLE INITIALLY DEFERRED;

ALTER TABLE raw_tickets
    ADD CONSTRAINT raw_clients_fk FOREIGN KEY ( client_id )
        REFERENCES clients ( id )
    DEFERRABLE INITIALLY DEFERRED;

ALTER TABLE raw_tickets
    ADD CONSTRAINT raw_environment_fk FOREIGN KEY ( environment )
        REFERENCES environment ( os )
    DEFERRABLE INITIALLY DEFERRED;

ALTER TABLE raw_tickets
    ADD CONSTRAINT raw_issue_type_fk FOREIGN KEY ( issue_type )
        REFERENCES issue_type ( type )
    DEFERRABLE INITIALLY DEFERRED;

ALTER TABLE raw_tickets
    ADD CONSTRAINT raw_priority_fk FOREIGN KEY ( priority )
        REFERENCES priority ( priority )
    DEFERRABLE INITIALLY DEFERRED;

ALTER TABLE raw_tickets
    ADD CONSTRAINT raw_software_fk FOREIGN KEY ( software )
        REFERENCES software ( name )
    DEFERRABLE INITIALLY DEFERRED;

ALTER TABLE raw_tickets
    ADD CONSTRAINT raw_tnumber_fk FOREIGN KEY ( ticket_number )
        REFERENCES ticket_identyfication ( ticket_number )
    DEFERRABLE INITIALLY DEFERRED;

CREATE OR REPLACE VIEW Client_Authentication ( email, password ) AS
SELECT
    clients.email,
    clients.password
FROM
    clients 
;

CREATE OR REPLACE VIEW Filled_Tickets ( Ticket_number, Description, Attempted_Solutions, Submission_Date, Modification_Date, Due_Date, Ticket_Status, Priority, Software, Issue_Type, Environment, Employee_ID, Client_ID ) AS
SELECT
    active_tickets.*
FROM
    active_tickets
UNION ALL
SELECT
    archived_tickets.ticket_number,
    archived_tickets.description,
    archived_tickets.attempted_solutions,
    archived_tickets.submission_date,
    archived_tickets.modification_date,
    archived_tickets.due_date,
    archived_tickets.ticket_status,
    archived_tickets.priority,
    archived_tickets.software,
    archived_tickets.issue_type,
    archived_tickets.environment,
    archived_tickets.employee_id,
    archived_tickets.client_id
FROM
    archived_tickets 
;

CREATE OR REPLACE VIEW Tickets ( Ticket_Number, Description, Attempted_Solutions, Submission_Date, Modification_Date, Due_Date, Ticket_Status, Priority, Software, Issue_Type, Environment, Employee_ID, Client_ID ) AS
SELECT
    active_tickets.*
FROM
    active_tickets
UNION ALL
SELECT
    archived_tickets.ticket_number,
    archived_tickets.description,
    archived_tickets.attempted_solutions,
    archived_tickets.submission_date,
    archived_tickets.modification_date,
    archived_tickets.due_date,
    archived_tickets.ticket_status,
    archived_tickets.priority,
    archived_tickets.software,
    archived_tickets.environment,
    archived_tickets.issue_type,
    archived_tickets.employee_id,
    archived_tickets.client_id
FROM
    archived_tickets
UNION ALL
SELECT
    raw_tickets.ticket_number,
    raw_tickets.description,
    NULL AS attempted_solutions,
    raw_tickets.submission_date,
    NULL AS modification_date,
    raw_tickets.due_date,
    NULL AS ticket_status,
    raw_tickets.priority,
    raw_tickets.software,
    raw_tickets.issue_type,
    raw_tickets.environment,
    NULL AS employee_id,
    raw_tickets.client_id
FROM
    raw_tickets 
;

CREATE OR REPLACE TRIGGER Active_Tickets_Delete_TRG 
    BEFORE DELETE ON Active_Tickets 
    FOR EACH ROW 
BEGIN
INSERT INTO Archived_Tickets(Ticket_Number, Description, Attempted_Solutions, Submission_Date, Modification_Date, Due_Date, Ticket_Status, Priority, Software, Issue_Type, Environment, Employee_ID, Client_ID)
VALUES (:OLD.Ticket_Number, :OLD.Description, :OLD.Attempted_Solutions, :OLD.Submission_Date, :OLD.Modification_Date, :OLD.Due_Date, :OLD.Ticket_Status, :OLD.Priority, :OLD.Software, :OLD.Issue_Type, :OLD.Environment, :OLD.Employee_ID, :OLD.Client_ID);
END; 
/

CREATE OR REPLACE TRIGGER Active_Tickets_Insert_TRG 
    BEFORE INSERT ON Active_Tickets 
    FOR EACH ROW 
BEGIN
SELECT SYSDATE INTO :NEW.Modification_Date FROM DUAL;
:NEW.Ticket_Status := 'Received';
END; 
/

CREATE OR REPLACE TRIGGER Active_Tickets_Update_TRG 
    BEFORE UPDATE ON Active_Tickets 
    FOR EACH ROW 
BEGIN
SELECT SYSDATE INTO :NEW.Modification_Date FROM DUAL;
INSERT INTO Archived_Tickets(Ticket_Number, Description, Attempted_Solutions, Submission_Date, Modification_Date, Due_Date, Ticket_Status, Priority, Software, Issue_Type, Environment, Employee_ID, Client_ID)
VALUES (:OLD.Ticket_Number, :OLD.Description, :OLD.Attempted_Solutions, :OLD.Submission_Date, :OLD.Modification_Date, :OLD.Due_Date, :OLD.Ticket_Status, :OLD.Priority, :OLD.Software, :OLD.Issue_Type, :OLD.Environment, :OLD.Employee_ID, :OLD.Client_ID);
END; 
/

CREATE OR REPLACE TRIGGER Archived_Tickets_Insert_TRG 
    BEFORE INSERT ON Archived_Tickets 
    FOR EACH ROW 
BEGIN
SELECT Archived_Tickets_ID_SEQ.nextval INTO :NEW.ID FROM DUAL;
END; 
/

CREATE OR REPLACE TRIGGER Clients_Insert_TRG 
    BEFORE INSERT ON Clients 
    FOR EACH ROW 
BEGIN
SELECT Client_ID_SEQ.nextval INTO :NEW.ID FROM DUAL;
END; 
/

CREATE OR REPLACE TRIGGER Employees_Insert_TRG 
    BEFORE INSERT ON Employees 
    FOR EACH ROW 
BEGIN
SELECT Employe_ID_SEQ.nextval INTO :NEW.ID FROM DUAL;
END; 
/

CREATE OR REPLACE TRIGGER Messages_Insert_TRG 
    BEFORE INSERT ON Messages 
    FOR EACH ROW 
BEGIN
SELECT Message_ID_SEQ.nextval INTO :NEW.ID FROM DUAL;
UPDATE Active_Tickets
SET Modification_Date = SYSDATE
WHERE Active_Tickets.Ticket_Number = :NEW.Ticket_Number;
END; 
/

CREATE OR REPLACE TRIGGER Raw_Tickets_Insert 
    BEFORE INSERT ON Raw_Tickets 
    FOR EACH ROW 
DECLARE
v_Ticket_number NUMBER;
v_response_time NUMBER(4);
BEGIN
SELECT Ticket_Number_SEQ.nextval INTO v_Ticket_number FROM DUAL;

INSERT INTO Ticket_Identyfication VALUES(v_Ticket_number);

:NEW.Ticket_Number := v_Ticket_number;
SELECT SYSDATE INTO :NEW.Submission_Date FROM DUAL;

v_response_time := Find_Response_Time_f(:NEW.Client_ID, :NEW.Software);
IF v_response_time IS NOT NULL THEN
:NEW.Due_Date := :NEW.Submission_Date + v_response_time/24;
END IF;
END; 
/



-- Oracle SQL Developer Data Modeler Summary Report: 
-- 
-- CREATE TABLE                            18
-- CREATE INDEX                            43
-- ALTER TABLE                             52
-- CREATE VIEW                              3
-- ALTER VIEW                               0
-- CREATE PACKAGE                           0
-- CREATE PACKAGE BODY                      0
-- CREATE PROCEDURE                         5
-- CREATE FUNCTION                          1
-- CREATE TRIGGER                           8
-- ALTER TRIGGER                            0
-- CREATE COLLECTION TYPE                   0
-- CREATE STRUCTURED TYPE                   0
-- CREATE STRUCTURED TYPE BODY              0
-- CREATE CLUSTER                           0
-- CREATE CONTEXT                           0
-- CREATE DATABASE                          0
-- CREATE DIMENSION                         0
-- CREATE DIRECTORY                         0
-- CREATE DISK GROUP                        0
-- CREATE ROLE                              0
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE SEQUENCE                          7
-- CREATE MATERIALIZED VIEW                 8
-- CREATE MATERIALIZED VIEW LOG             0
-- CREATE SYNONYM                           0
-- CREATE TABLESPACE                        0
-- CREATE USER                              0
-- 
-- DROP TABLESPACE                          0
-- DROP DATABASE                            0
-- 
-- REDACTION POLICY                         0
-- 
-- ORDS DROP SCHEMA                         0
-- ORDS ENABLE SCHEMA                       0
-- ORDS ENABLE OBJECT                       0
-- 
-- ERRORS                                   0
-- WARNINGS                                 0
